AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Power plant status backend with API, S3, WebSocket, and Lambda

Globals:
  Function:
    Runtime: nodejs18.x
    MemorySize: 128
    Timeout: 5
    Architectures:
      - x86_64

Resources:

  ### S3 Bucket
  PlantDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-plant-data"
      VersioningConfiguration:
        Status: Enabled

  ### DynamoDB Table for WebSocket Connections
  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-WebSocketConnections"
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ### REST API Gateway
  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: PlantRestApi
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"


  ### WebSocket API Gateway
  PlantWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: PlantWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ### IAM Role for API Gateway to invoke Lambda (WebSocket)
  WebSocketApiInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaWebSocket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"

  ### Lambda to update plant data & notify WebSocket clients
  UpdatePlantFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdatePlantFunction
      Handler: updateData.handler
      CodeUri: .
      Environment:
        Variables:
          CONNECTION_TABLE: !Ref WebSocketConnectionsTable
          BUCKET_NAME: !Ref PlantDataBucket
          WEBSOCKET_ENDPOINT: !Sub "${PlantWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PlantDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: "*"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /plants
            Method: POST

  ### Lambda to read plant data from S3
  ReadPlantFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ReadPlantFunction
      Handler: readData.handler
      CodeUri: .
      Environment:
        Variables:
          BUCKET_NAME: !Ref PlantDataBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref PlantDataBucket
      Events:
        GetPlantEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /plants/{plant_id}
            Method: GET
        AllPlantsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /plants
            Method: GET

  ### Lambda: WebSocket $connect
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WebSocketConnectFunction
      Handler: connect.handler
      CodeUri: .
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  ### Lambda: WebSocket $disconnect
  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WebSocketDisconnectFunction
      Handler: disconnect.handler
      CodeUri: .
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  ### WebSocket Integrations
  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PlantWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambdaArn}/invocations
        - { ConnectLambdaArn: !GetAtt WebSocketConnectFunction.Arn }
      IntegrationMethod: POST
      CredentialsArn: !GetAtt WebSocketApiInvokeRole.Arn

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PlantWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectLambdaArn}/invocations
        - { DisconnectLambdaArn: !GetAtt WebSocketDisconnectFunction.Arn }
      IntegrationMethod: POST
      CredentialsArn: !GetAtt WebSocketApiInvokeRole.Arn

  ### WebSocket Routes
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PlantWebSocketApi
      RouteKey: $connect
      Target: !Sub "integrations/${WebSocketConnectIntegration}"

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PlantWebSocketApi
      RouteKey: $disconnect
      Target: !Sub "integrations/${WebSocketDisconnectIntegration}"

  ### WebSocket Deployment
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      ApiId: !Ref PlantWebSocketApi
      AutoDeploy: true

  ### Permissions: Allow WebSocket API to call Lambdas
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WebSocketConnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WebSocketDisconnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com